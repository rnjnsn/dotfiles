# To get image previews, follow these 4 steps:
# 1. Install ueberzug
# 2. Your previewer file (e.g., ~/.config/lf/previewer) must include a ueberzug image preview command.
# 3. Define a cleaner script as shown below using `set cleaner`.
# 4. Start lf via a wrapper script (e.g., ~/.local/bin/lfub) to initialize ueberzug environment.
#    You can alias this in your shellrc: `alias lf="lfub"`

# Main options
set icons
set period 1
#set relativenumber
#set number
set hidden!
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/previewer'
set promptfmt "
 \033[48;2;23;147;209;38;2;255;255;255m \033[38;2;23;147;209;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f 
\033[38;2;58;67;89;49m\033[m"
set incsearch
set incfilter
#set globsearch on
set ratios 2:3:4
set truncatechar "…"
set waitmsg "\033[1;31m⏎ to continue...\033[m"
set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"
set dircounts
set tabstop 4
set scrolloff 5
set wrapscroll
set shellopts '-eu'
set ifs "\n"
set shell "bash"
set ruler 'df:acc:progress:selection:filter:ind'
set cursorpreviewfmt "\033[7m"

source '~/.config/lf/opener'

%test $LF_LEVEL -eq 1 || >&2 printf "Warning: You are inside a nested lf instance!"

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd trash %trash-put $fx

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
	printf "\t\033[1;33mDelete? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS]) rm -rf -- $fx ;;
	esac
}}

cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}

cmd shred ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
	printf "\t\033[1;34mShred permanently? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS])
			for f in $fx; do
				if [ -f "$f" ]; then
					shred -u -n 3 "$f" >/dev/null 2>&1 &
				elif [ -d "$f" ]; then
					rshred -fdu "$f"
				fi
			done
		;;
	esac
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx
	printf "\t\033[1;34mExtract archive? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS]) aunpack $fx ;;
	esac
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear
	echo "Move to:"
	if dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-"$HOME/.config"}/shell/bm-dirs" \
			| fzf \
			| sed 's|~|$HOME|'
		)"
	then
		for x in $fx; do
			eval mv -iv \"$x\" \"$dest\"
		done &&
			notify-send "lf" "Moved to $dest"
	fi
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear
	echo "Copy to:"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-"$HOME/.config"}/shell/bm-dirs" \
		| fzf \
		| sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "lf" "Copied to $dest"
}}

cmd broot ${{
	selected="$(broot)"
	if [ -d "$selected" ]; then
		lf -remote "send ${id} cd \"${selected}\""
	elif [ -e "$selected" ]; then
		lf -remote "send ${id} select \"${selected}\""
	else
		>&2 printf "Could not select %s\n" "${selected}"
	fi
}}

cmd paste_link %{{
	IFS='\n'
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	if [ $# -lt 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 1
	fi
	case "$mode" in
		copy) ln -sr -t . -- "$@";;
		move) ln -t . -- "$@";;
	esac || exit $?
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

cmd follow_link %{{
	lf -remote "send ${id} select \"$(readlink $f)\""
}}

cmd zlua %{{
	lf -remote "send ${id} cd \"$(z.lua -e $*)\""
}}

cmd zlua_i ${{
	dir=$(z.lua -l "$@" \
		| fzf --nth 2.. --tac +s -e \
			--header "Frequent directories" --header-first \
			--preview "lsd --color always --icon always --tree --depth 3 --group-dirs first {+2} 2>/dev/null" \
		| awk '{print substr($0, index($0,$2))}'
	)
	lf -remote "send ${id} cd \"${dir}\""
}}

cmd gsh %{{
	lf -remote "send ${id} cd \"$(g.sh -x $*)\""
}}

cmd gsh_fuzzy %{{
	lf -remote "send ${id} cd \"$(_GS_GREP='fzf -f' g.sh -l $* | awk 'NR==1{print $2}')\""
}}

cmd gsh_i ${{
	selected=$(g.sh -l "$@" \
		| fzf --nth 2.. --tac +s -e \
		--header "Bookmarked directories" --header-first \
		--preview "lsd --color always --icon always --tree --depth 2 --group-dirs first {+2} 2>/dev/null" \
		| awk '{print substr($0, index($0,$2))}'
	)
	if [ -d "$selected" ]; then
		lf -remote "send ${id} cd \"${selected}\""
	elif [ -e "$selected" ]; then
		lf -remote "send ${id} select \"${selected}\""
	else
		>&2 printf "Could not select %s\n" "${selected}"
	fi
}}

cmd stop ${{
	kill -TSTP $(ps -p $$ -o 'ppid=')
}}

cmd setbg "$1"

cmd remove_dupes ${{
    ~/.local/bin/public-scripts/remove-dupes.sh "$PWD"
}}

cmd prefix_files ${{
    # Pass selected files to the script
    [ -n "$fs" ] && printf '%s\n' $fs | ~/.local/bin/public-scripts/prefix-files.sh || echo "No files selected."
}}

cmd rsyncpull ${{
    ~/.local/bin/public-scripts/rsync-pull $fx
    lf -remote "send $id echo '✅ Downloaded with rsync'"
}}

map <a-p> rsyncpull


map <a-d> rsyncpull


map rd remove-dupes
map pf prefix-files

# KEY MAPPINGS
# (Only relevant comments shown; all functional keybinds preserved.)

# Movement
map k up
map j down
map h updir
map l open
map Ñ openwith
# map h read
map { half-up
map } half-down
map <c-n> down
map <c-p> up

# File name search
# Dependency: my 'ffd' script which uses:
# - fd or find, fzf, tput; bat and lsd (for previews)
map f
map ff $lf -remote "send $id select \"$(ffd -p)\"" # → Fuzzy select a file (with preview), highlight in lf
map fe &ffd -f -e -p # fe → Fuzzy open a file (zathura, glow, feh, nvim, etc.)
map fd $lf -remote "send $id cd \"$(ffd -d -p)\"" # fd → Fuzzy cd into a directory
map fb broot # fb → Launch broot (tree view with live fuzzy filter)
map -  search
map _  search-back
map zf find
map zF find-back


# File content search
# Dependency: my 'rgfzf' script which uses:
# - bash, rg or rga (which has other optional deps), fzf; bat (for previews)
map rg $lf -remote "send $id select \"$(rgfzf -p)\""
map rG $lf -remote "send $id select \"$(rgfzf -p --depth 1)\""
map rf $lf -remote "send $id select \"$(rgfzf -dp)\""
map rF $lf -remote "send $id select \"$(rgfzf -dp --depth 1)\""
map ra $lf -remote "send $id select \"$(rgfzf -dp --rg=rga --depth 1 -s 0.3)\""
map rA $lf -remote "send $id select \"$(rgfzf -dp --rg=rga -s 0.8)\""  # Can be very CPU intensive, use with care

# Main maps
map Km maps  # List normal mode mappings
map Kc cmaps  # List command mode mappings
map d
map dd cut
map D delete
# map <a-d> trash
map <a-D> shred
map E extract
#map C copyto
#map M moveto
map P paste_link
map <a-n> push :mkdir<space>
map <a-t> push $touch<space>
map <a-r> reload
map <enter> shell
map x $$f
map X !$f
map <a-x> chmodx
map <a-X> $setbg $f
map C &compila $f  # Compile
map <a-c> $compila -ir $f  # Interpret/Compile and run
map o &mimeopen $f
map O $mimeopen --ask $f
map U glob-unselect *
map <a-u> glob-select *
# Remember that 'v' toggles selections
# TODO:
# - recursive selection

# Navigation
map z<space> push :zlua<space>
map <a-z> zlua_i
map <a-g> gsh_i
map zo zlua_i
map g<space> push :gsh<space>
map gñ push :gsh_fuzzy<space>
map go gsh_i
map gl follow_link
map gr cd /
map gt cd /tmp
map gs $lf -remote "send $id cd \"$SCRIPTS\""
map J jumps
# navigate the jump list with "#[", "#]"

# Drag commands
# Dependencies: dragon-drag-and-drop and my 'drag' script which uses it

cmd drag_all &ls -Ah --zero | xargs -d'\0' dragon-drag-and-drop 2>/dev/null
cmd drag_allx &ls -Ah --zero | xargs -d'\0' dragon-drag-and-drop -a -x 2>/dev/null

map dl drag_all  # Drag from files in current dir
map dL drag_allx    # Drag all files in current dir and exit
map ds &dragon-drag-and-drop $fx  # Drag from selected files
map dS &dragon-drag-and-drop -a -x $fx  # Drag all selected files and exit
map dm &drag mv "$PWD"  # Drag move into current dir
map dc &drag cp "$PWD"  # Drag copy into current dir
map dw &drag wget "$PWD"  # Drag download into current dir

#map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-"$HOME/.config"}/shell/bm-dirs" | fzf)"

# Command mode
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back
cmap <a-j> cmd-left
cmap <a-ñ> cmd-right
cmap <a-h> cmd-escape
cmap <a-I> cmd-home
cmap <a-A> cmd-end
cmap <a-,> cmd-delete
#cmap <a-backspace> cmd-delete  # Bug: No se puede mapear alt + backspace al parecer

# Renaming
map c
map r
map i rename  # Before extension
map A push i<a-A>  # At the very end
map cc push i<a-A><c-u>  # New rename
map I push i<c-a>  # At the very beginning
map a push i<a-A><a-b>  # After extension
# map b $vidir   # Bulkrename in $EDITOR, 'vidir' from more-utils
# map B $find | vidir -

map V push $"$EDITOR"<space>

map <c-z> stop

# New forked terminal in current directory
map W &{ nohup "${TERMINAL:-alacritty}" >/dev/null 2>&1& }

# Copy selected file names
map Y $printf "%s" "$fx" | xclip -selection clipboard

# Change background image
map cb &fondo-awesome $f

# Source Bookmarks
#source "~/.config/lf/shortcutrc"
